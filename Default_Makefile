PATH := /usr/um/gcc-4.7.0/bin:$(PATH)
LD_LIBRARY_PATH := /usr/um/gcc-4.7.0/lib64
LD_RUN_PATH := /usr/um/gcc-4.7.0/lib64

CC = g++
LL = g++

#Google Test Framework stuff
GTEST_DIR = ../gtest
USER_DIR = ./

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -std=c++11

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread 

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# -----------------------------------------------------------------------

# Modify TESTS, OBJS, add PROG
# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = 

# List of objects to be compiled and linked
OBJS =

# Resulting project name
PROG = 

# -----------------------------------------------------------------------

# Default Flags
CFLAGS = -c -Wall -Wextra -pedantic -Wvla -std=c++11
LFLAGS = -Wall -Wextra -pedantic -Wvla

# default make - will compile default
default: $(PROG)

$(PROG): $(OBJS)
	$(LD) $(LFLAGS) $(OBJS) -o $(PROG)

# make release - will compile "default" with $(FLAGS) and the O3 flag
release: CFLAGS += -O3
release: default

# make debug - will compile "default" with $(FLAGS) and the g flag
debug: CFLAGS += -g
debug: default

profile: CFLAGS += -O3 -pg
profile: default

# make unit_test - will compile files to be run via gtest
unit_test: $(TESTS)

# make clean - remove .o files.  You can modify it to remove whatever
clean:
	rm -f *.o
	rm -f $(TESTS) gtest.a gtest_main.a *.o
 	rm -f submit.tar.gz

# -----------------------------------------------------------------------

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	g++ $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
 	++ $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
 	(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# -----------------------------------------------------------------------

# Add tests to be compiled
#basicHeapTests: basicHeapTests.cpp gtest_main.a $(GTEST_HEADERS)
#	g++ $(CPPFLAGS) basicHeapTests.cpp gtest_main.a $(CXXFLAGS) -lpthread -o $@

# -----------------------------------------------------------------------

# Object files to be made
#main.o: main.cpp main.h
#	$(CC) $(CFLAGS) main.o

# -----------------------------------------------------------------------

# Place any automated command line stuff here